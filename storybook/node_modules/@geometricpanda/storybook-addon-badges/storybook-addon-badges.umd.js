(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@storybook/addons'), require('react/jsx-runtime'), require('@storybook/api'), require('@storybook/components'), require('@storybook/theming')) :
  typeof define === 'function' && define.amd ? define(['exports', '@storybook/addons', 'react/jsx-runtime', '@storybook/api', '@storybook/components', '@storybook/theming'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.StorybookAddonBadges = {}, global['@storybook/addons'], global.jsxRuntime, global['@storybook/api'], global['@storybook/components'], global['@storybook/theming']));
}(this, (function (exports, addons, jsxRuntime, api, components, theming) { 'use strict';

  var _a;

  var ADDON_ID = '@geometricpanda/storybook-addon-badges';
  var ADDON_TITLE = 'Storybook Addon Badges';
  var PARAM_BADGES_CONFIG_KEY = 'badgesConfig';
  var PARAM_BADGES_KEY = 'badges';
  exports.BADGE = void 0;

  (function (BADGE) {
    BADGE["DEFAULT"] = "default";
    BADGE["BETA"] = "beta";
    BADGE["STABLE"] = "stable";
    BADGE["NEEDS_REVISION"] = "needs-revision";
    BADGE["OBSOLETE"] = "obsolete";
    BADGE["EXPERIMENTAL"] = "experimental";
    BADGE["DEPRECATED"] = "deprecated";
  })(exports.BADGE || (exports.BADGE = {}));

  var defaultBadgesConfig = (_a = {}, _a[exports.BADGE.DEFAULT] = {
    title: 'Badge'
  }, _a[exports.BADGE.BETA] = {
    title: 'Beta',
    styles: {
      backgroundColor: '#D6E0FF',
      borderColor: '#2952CC',
      color: '#2952CC'
    }
  }, _a[exports.BADGE.STABLE] = {
    title: 'Stable',
    styles: {
      backgroundColor: '#DCF2EA',
      borderColor: '#317159',
      color: '#317159'
    }
  }, _a[exports.BADGE.NEEDS_REVISION] = {
    title: 'Needs Revision',
    styles: {
      backgroundColor: '#FFEFD2',
      borderColor: '#66460D',
      color: '#66460D'
    }
  }, _a[exports.BADGE.OBSOLETE] = {
    title: 'Obsolete',
    styles: {
      backgroundColor: '#F9DADA',
      borderColor: '#7D2828',
      color: '#7D2828'
    }
  }, _a[exports.BADGE.EXPERIMENTAL] = {
    title: 'Experimental',
    styles: {
      backgroundColor: '#E7E4F9',
      borderColor: '#6E62B6',
      color: '#6E62B6'
    }
  }, _a[exports.BADGE.DEPRECATED] = {
    title: 'Deprecated',
    styles: {
      backgroundColor: '#F8E3DA',
      borderColor: '#85462B',
      color: '#85462B'
    }
  }, _a);
  var defaultBadgeConfig = defaultBadgesConfig[exports.BADGE.DEFAULT];

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  var getBadgeConfig = function getBadgeConfig(badge, config) {
    return __assign(__assign(__assign({}, defaultBadgeConfig), {
      title: badge
    }), config);
  };
  var getTitle = function getTitle(badge, config) {
    return getBadgeConfig(badge, config).title;
  };
  var getTooltip = function getTooltip(badge, config) {
    return getBadgeConfig(badge, config).tooltip;
  };
  var getBadgeCustomProperty = function getBadgeCustomProperty(name, suffix) {
    var normalisedName = name.replace(/[^a-z0-9]/g, function (str) {
      var _char = str.charCodeAt(0);

      if (_char == 32) {
        return '-';
      }

      if (_char >= 65 && _char <= 90) {
        return '_' + str.toLowerCase();
      }

      return '__' + ('000' + _char.toString(16)).slice(-4);
    });
    return "--badge-" + normalisedName + "-" + suffix;
  };

  var WithBadgeTooltip = function WithBadgeTooltip(Component) {
    return function (_a) {
      var badge = _a.badge,
          config = _a.config,
          rest = __rest(_a, ["badge", "config"]);

      var tooltipData = getTooltip(badge, config);
      var tooltipMessageProps;

      if (typeof tooltipData === 'string') {
        tooltipMessageProps = {
          desc: tooltipData
        };
      } else {
        tooltipMessageProps = tooltipData;
      }

      return tooltipData ? jsxRuntime.jsx(components.WithTooltip, __assign({
        tooltip: jsxRuntime.jsx(components.TooltipMessage, __assign({}, tooltipMessageProps), void 0)
      }, {
        children: jsxRuntime.jsx(Component, __assign({
          badge: badge
        }, rest), void 0)
      }), void 0) : jsxRuntime.jsx(Component, __assign({
        badge: badge
      }, rest), void 0);
    };
  };

  var BadgeWrapper = theming.styled.span(function (_a) {
    var theme = _a.theme;
    return {
      display: 'flex',
      paddingInline: theme.layoutMargin / 2
    };
  });
  var BadgeInner = theming.styled.span(function (_a) {
    var badge = _a.badge;
    return {
      borderColor: "var(" + getBadgeCustomProperty(badge, 'border-color') + ")",
      borderRadius: "var(" + getBadgeCustomProperty(badge, 'border-radius') + ")",
      borderStyle: "var(" + getBadgeCustomProperty(badge, 'border-style') + ")",
      borderWidth: "var(" + getBadgeCustomProperty(badge, 'border-width') + ")",
      color: "var(" + getBadgeCustomProperty(badge, 'color') + ")",
      backgroundColor: "var(" + getBadgeCustomProperty(badge, 'background-color') + ")",
      fontSize: "var(" + getBadgeCustomProperty(badge, 'font-size') + ")",
      fontFamily: "var(" + getBadgeCustomProperty(badge, 'font-family') + ")",
      // Typecasting as 'bold' due to custom properties not working with `styled`.
      fontWeight: "var(" + getBadgeCustomProperty(badge, 'font-weight') + ")",
      lineHeight: "var(" + getBadgeCustomProperty(badge, 'line-height') + ")",
      // Typecasting as 'uppercase' due to custom properties not working with `styled`.
      textTransform: "var(" + getBadgeCustomProperty(badge, 'text-transform') + ")",
      paddingInline: "var(" + getBadgeCustomProperty(badge, 'padding-inline') + ")",
      paddingBlock: "var(" + getBadgeCustomProperty(badge, 'padding-block') + ")",
      display: 'block'
    };
  });
  var BadgeInnerWithTooltip = WithBadgeTooltip(BadgeInner);
  var Badge = function Badge(_a) {
    var badge = _a.badge,
        config = _a.config;
    return jsxRuntime.jsx(BadgeWrapper, {
      children: jsxRuntime.jsx(BadgeInnerWithTooltip, __assign({
        badge: badge,
        config: config
      }, {
        children: getTitle(badge, config)
      }), void 0)
    }, void 0);
  };

  var getCustomProperties = function getCustomProperties(config) {
    return Object.entries(config).reduce(function (acc, _a) {
      var _b;

      var name = _a[0],
          _c = _a[1],
          color = _c.color,
          contrast = _c.contrast,
          styles = _c.styles;
      return __assign(__assign({}, acc), (_b = {}, _b[getBadgeCustomProperty(name, 'background-color')] = (styles === null || styles === void 0 ? void 0 : styles.backgroundColor) || contrast || '#EDEFF5', _b[getBadgeCustomProperty(name, 'border-color')] = (styles === null || styles === void 0 ? void 0 : styles.borderColor) || color || '#474D66', _b[getBadgeCustomProperty(name, 'color')] = (styles === null || styles === void 0 ? void 0 : styles.color) || color || '#474D66', _b[getBadgeCustomProperty(name, 'border-width')] = (styles === null || styles === void 0 ? void 0 : styles.borderWidth) || '1px', _b[getBadgeCustomProperty(name, 'border-style')] = (styles === null || styles === void 0 ? void 0 : styles.borderStyle) || 'solid', _b[getBadgeCustomProperty(name, 'border-radius')] = (styles === null || styles === void 0 ? void 0 : styles.borderRadius) || '3px', _b[getBadgeCustomProperty(name, 'font-family')] = (styles === null || styles === void 0 ? void 0 : styles.fontFamily) || 'inherit', _b[getBadgeCustomProperty(name, 'font-size')] = (styles === null || styles === void 0 ? void 0 : styles.fontSize) || '0.625rem', _b[getBadgeCustomProperty(name, 'font-weight')] = (styles === null || styles === void 0 ? void 0 : styles.fontWeight) || 'bold', _b[getBadgeCustomProperty(name, 'line-height')] = (styles === null || styles === void 0 ? void 0 : styles.lineHeight) || '1', _b[getBadgeCustomProperty(name, 'padding-block')] = (styles === null || styles === void 0 ? void 0 : styles.paddingBlock) || '2px', _b[getBadgeCustomProperty(name, 'padding-inline')] = (styles === null || styles === void 0 ? void 0 : styles.paddingInline) || '5px', _b[getBadgeCustomProperty(name, 'text-transform')] = (styles === null || styles === void 0 ? void 0 : styles.textTransform) || 'uppercase', _b));
    }, {});
  };

  var BadgesWrapper = theming.styled.div(function (_a) {
    var theme = _a.theme,
        badgesConfig = _a.badgesConfig;
    return __assign(__assign({}, getCustomProperties(badgesConfig)), {
      marginInline: theme.layoutMargin / -2,
      paddingLeft: theme.layoutMargin,
      display: 'flex',
      alignItems: 'center'
    });
  });
  var Badges = function Badges(_a) {
    var _b = _a.badges,
        badges = _b === void 0 ? [] : _b,
        _c = _a.badgesConfig,
        badgesConfig = _c === void 0 ? defaultBadgesConfig : _c;
    return jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [jsxRuntime.jsx(components.Separator, {}, void 0), jsxRuntime.jsx(BadgesWrapper, __assign({
        badgesConfig: badgesConfig
      }, {
        children: badges.map(function (badge, index) {
          return jsxRuntime.jsx(Badge, {
            badge: badge,
            config: badgesConfig[badge]
          }, badge);
        })
      }), void 0), jsxRuntime.jsx(components.Separator, {}, void 0)]
    }, void 0);
  };

  var Manager = function Manager() {
    return jsxRuntime.jsx(api.Consumer, {
      children: function children(_a) {
        var api = _a.api,
            state = _a.state;
        var story = api.getData(state.storyId, state.refId);
        var customBadgesConfig = api.getCurrentParameter(PARAM_BADGES_CONFIG_KEY) || {};

        var badgesConfig = __assign(__assign({}, defaultBadgesConfig), customBadgesConfig);

        var badges = api.getCurrentParameter(PARAM_BADGES_KEY) || [];
        return story && badges.length ? jsxRuntime.jsx(Badges, {
          badges: badges,
          badgesConfig: badgesConfig
        }, void 0) : null;
      }
    }, void 0);
  };

  addons.addons.register(ADDON_ID, function () {
    addons.addons.add(ADDON_ID, {
      title: ADDON_TITLE,
      type: addons.types.TOOL,
      match: function match() {
        return true;
      },
      render: Manager
    });
  });

  exports.ADDON_ID = ADDON_ID;
  exports.ADDON_TITLE = ADDON_TITLE;
  exports.PARAM_BADGES_CONFIG_KEY = PARAM_BADGES_CONFIG_KEY;
  exports.PARAM_BADGES_KEY = PARAM_BADGES_KEY;
  exports.defaultBadgeConfig = defaultBadgeConfig;
  exports.defaultBadgesConfig = defaultBadgesConfig;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

import { addons, types } from '@storybook/addons';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { Consumer } from '@storybook/api';
import { WithTooltip, TooltipMessage, Separator } from '@storybook/components';
import { styled } from '@storybook/theming';

var _defaultBadgesConfig;

var ADDON_ID = '@geometricpanda/storybook-addon-badges';
var ADDON_TITLE = 'Storybook Addon Badges';
var PARAM_BADGES_CONFIG_KEY = 'badgesConfig';
var PARAM_BADGES_KEY = 'badges';
var BADGE;

(function (BADGE) {
  BADGE["DEFAULT"] = "default";
  BADGE["BETA"] = "beta";
  BADGE["STABLE"] = "stable";
  BADGE["NEEDS_REVISION"] = "needs-revision";
  BADGE["OBSOLETE"] = "obsolete";
  BADGE["EXPERIMENTAL"] = "experimental";
  BADGE["DEPRECATED"] = "deprecated";
})(BADGE || (BADGE = {}));

var defaultBadgesConfig = (_defaultBadgesConfig = {}, _defaultBadgesConfig[BADGE.DEFAULT] = {
  title: 'Badge'
}, _defaultBadgesConfig[BADGE.BETA] = {
  title: 'Beta',
  styles: {
    backgroundColor: '#D6E0FF',
    borderColor: '#2952CC',
    color: '#2952CC'
  }
}, _defaultBadgesConfig[BADGE.STABLE] = {
  title: 'Stable',
  styles: {
    backgroundColor: '#DCF2EA',
    borderColor: '#317159',
    color: '#317159'
  }
}, _defaultBadgesConfig[BADGE.NEEDS_REVISION] = {
  title: 'Needs Revision',
  styles: {
    backgroundColor: '#FFEFD2',
    borderColor: '#66460D',
    color: '#66460D'
  }
}, _defaultBadgesConfig[BADGE.OBSOLETE] = {
  title: 'Obsolete',
  styles: {
    backgroundColor: '#F9DADA',
    borderColor: '#7D2828',
    color: '#7D2828'
  }
}, _defaultBadgesConfig[BADGE.EXPERIMENTAL] = {
  title: 'Experimental',
  styles: {
    backgroundColor: '#E7E4F9',
    borderColor: '#6E62B6',
    color: '#6E62B6'
  }
}, _defaultBadgesConfig[BADGE.DEPRECATED] = {
  title: 'Deprecated',
  styles: {
    backgroundColor: '#F8E3DA',
    borderColor: '#85462B',
    color: '#85462B'
  }
}, _defaultBadgesConfig);
var defaultBadgeConfig = defaultBadgesConfig[BADGE.DEFAULT];

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var getBadgeConfig = function getBadgeConfig(badge, config) {
  return Object.assign(Object.assign(Object.assign({}, defaultBadgeConfig), {
    title: badge
  }), config);
};
var getTitle = function getTitle(badge, config) {
  return getBadgeConfig(badge, config).title;
};
var getTooltip = function getTooltip(badge, config) {
  return getBadgeConfig(badge, config).tooltip;
};
var getBadgeCustomProperty = function getBadgeCustomProperty(name, suffix) {
  var normalisedName = name.replace(/[^a-z0-9]/g, function (str) {
    var _char = str.charCodeAt(0);

    if (_char == 32) {
      return '-';
    }

    if (_char >= 65 && _char <= 90) {
      return '_' + str.toLowerCase();
    }

    return '__' + ('000' + _char.toString(16)).slice(-4);
  });
  return "--badge-" + normalisedName + "-" + suffix;
};

var WithBadgeTooltip = function WithBadgeTooltip(Component) {
  return function (_a) {
    var badge = _a.badge,
        config = _a.config,
        rest = __rest(_a, ["badge", "config"]);

    var tooltipData = getTooltip(badge, config);
    var tooltipMessageProps;

    if (typeof tooltipData === 'string') {
      tooltipMessageProps = {
        desc: tooltipData
      };
    } else {
      tooltipMessageProps = tooltipData;
    }

    return tooltipData ? jsx(WithTooltip, Object.assign({
      tooltip: jsx(TooltipMessage, Object.assign({}, tooltipMessageProps), void 0)
    }, {
      children: jsx(Component, Object.assign({
        badge: badge
      }, rest), void 0)
    }), void 0) : jsx(Component, Object.assign({
      badge: badge
    }, rest), void 0);
  };
};

var BadgeWrapper = styled.span(function (_ref) {
  var theme = _ref.theme;
  return {
    display: 'flex',
    paddingInline: theme.layoutMargin / 2
  };
});
var BadgeInner = styled.span(function (_ref2) {
  var badge = _ref2.badge;
  return {
    borderColor: "var(" + getBadgeCustomProperty(badge, 'border-color') + ")",
    borderRadius: "var(" + getBadgeCustomProperty(badge, 'border-radius') + ")",
    borderStyle: "var(" + getBadgeCustomProperty(badge, 'border-style') + ")",
    borderWidth: "var(" + getBadgeCustomProperty(badge, 'border-width') + ")",
    color: "var(" + getBadgeCustomProperty(badge, 'color') + ")",
    backgroundColor: "var(" + getBadgeCustomProperty(badge, 'background-color') + ")",
    fontSize: "var(" + getBadgeCustomProperty(badge, 'font-size') + ")",
    fontFamily: "var(" + getBadgeCustomProperty(badge, 'font-family') + ")",
    // Typecasting as 'bold' due to custom properties not working with `styled`.
    fontWeight: "var(" + getBadgeCustomProperty(badge, 'font-weight') + ")",
    lineHeight: "var(" + getBadgeCustomProperty(badge, 'line-height') + ")",
    // Typecasting as 'uppercase' due to custom properties not working with `styled`.
    textTransform: "var(" + getBadgeCustomProperty(badge, 'text-transform') + ")",
    paddingInline: "var(" + getBadgeCustomProperty(badge, 'padding-inline') + ")",
    paddingBlock: "var(" + getBadgeCustomProperty(badge, 'padding-block') + ")",
    display: 'block'
  };
});
var BadgeInnerWithTooltip = WithBadgeTooltip(BadgeInner);
var Badge = function Badge(_ref3) {
  var badge = _ref3.badge,
      config = _ref3.config;
  return jsx(BadgeWrapper, {
    children: jsx(BadgeInnerWithTooltip, Object.assign({
      badge: badge,
      config: config
    }, {
      children: getTitle(badge, config)
    }), void 0)
  }, void 0);
};

var getCustomProperties = function getCustomProperties(config) {
  return Object.entries(config).reduce(function (acc, _ref) {
    var _Object$assign;

    var name = _ref[0],
        _ref$ = _ref[1],
        color = _ref$.color,
        contrast = _ref$.contrast,
        styles = _ref$.styles;
    return Object.assign(Object.assign({}, acc), (_Object$assign = {}, _Object$assign[getBadgeCustomProperty(name, 'background-color')] = (styles === null || styles === void 0 ? void 0 : styles.backgroundColor) || contrast || '#EDEFF5', _Object$assign[getBadgeCustomProperty(name, 'border-color')] = (styles === null || styles === void 0 ? void 0 : styles.borderColor) || color || '#474D66', _Object$assign[getBadgeCustomProperty(name, 'color')] = (styles === null || styles === void 0 ? void 0 : styles.color) || color || '#474D66', _Object$assign[getBadgeCustomProperty(name, 'border-width')] = (styles === null || styles === void 0 ? void 0 : styles.borderWidth) || '1px', _Object$assign[getBadgeCustomProperty(name, 'border-style')] = (styles === null || styles === void 0 ? void 0 : styles.borderStyle) || 'solid', _Object$assign[getBadgeCustomProperty(name, 'border-radius')] = (styles === null || styles === void 0 ? void 0 : styles.borderRadius) || '3px', _Object$assign[getBadgeCustomProperty(name, 'font-family')] = (styles === null || styles === void 0 ? void 0 : styles.fontFamily) || 'inherit', _Object$assign[getBadgeCustomProperty(name, 'font-size')] = (styles === null || styles === void 0 ? void 0 : styles.fontSize) || '0.625rem', _Object$assign[getBadgeCustomProperty(name, 'font-weight')] = (styles === null || styles === void 0 ? void 0 : styles.fontWeight) || 'bold', _Object$assign[getBadgeCustomProperty(name, 'line-height')] = (styles === null || styles === void 0 ? void 0 : styles.lineHeight) || '1', _Object$assign[getBadgeCustomProperty(name, 'padding-block')] = (styles === null || styles === void 0 ? void 0 : styles.paddingBlock) || '2px', _Object$assign[getBadgeCustomProperty(name, 'padding-inline')] = (styles === null || styles === void 0 ? void 0 : styles.paddingInline) || '5px', _Object$assign[getBadgeCustomProperty(name, 'text-transform')] = (styles === null || styles === void 0 ? void 0 : styles.textTransform) || 'uppercase', _Object$assign));
  }, {});
};

var BadgesWrapper = styled.div(function (_ref2) {
  var theme = _ref2.theme,
      badgesConfig = _ref2.badgesConfig;
  return Object.assign(Object.assign({}, getCustomProperties(badgesConfig)), {
    marginInline: theme.layoutMargin / -2,
    paddingLeft: theme.layoutMargin,
    display: 'flex',
    alignItems: 'center'
  });
});
var Badges = function Badges(_ref3) {
  var _ref3$badges = _ref3.badges,
      badges = _ref3$badges === void 0 ? [] : _ref3$badges,
      _ref3$badgesConfig = _ref3.badgesConfig,
      badgesConfig = _ref3$badgesConfig === void 0 ? defaultBadgesConfig : _ref3$badgesConfig;
  return jsxs(Fragment, {
    children: [jsx(Separator, {}, void 0), jsx(BadgesWrapper, Object.assign({
      badgesConfig: badgesConfig
    }, {
      children: badges.map(function (badge, index) {
        return jsx(Badge, {
          badge: badge,
          config: badgesConfig[badge]
        }, badge);
      })
    }), void 0), jsx(Separator, {}, void 0)]
  }, void 0);
};

var Manager = function Manager() {
  return jsx(Consumer, {
    children: function children(_ref) {
      var api = _ref.api,
          state = _ref.state;
      var story = api.getData(state.storyId, state.refId);
      var customBadgesConfig = api.getCurrentParameter(PARAM_BADGES_CONFIG_KEY) || {};
      var badgesConfig = Object.assign(Object.assign({}, defaultBadgesConfig), customBadgesConfig);
      var badges = api.getCurrentParameter(PARAM_BADGES_KEY) || [];
      return story && badges.length ? jsx(Badges, {
        badges: badges,
        badgesConfig: badgesConfig
      }, void 0) : null;
    }
  }, void 0);
};

addons.register(ADDON_ID, function () {
  addons.add(ADDON_ID, {
    title: ADDON_TITLE,
    type: types.TOOL,
    match: function match() {
      return true;
    },
    render: Manager
  });
});

export { ADDON_ID, ADDON_TITLE, BADGE, PARAM_BADGES_CONFIG_KEY, PARAM_BADGES_KEY, defaultBadgeConfig, defaultBadgesConfig };
